using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.IO;
using System.Security.Permissions;
using System.Collections;
using Path = System.IO.Path;
using WinForms = System.Windows.Forms;
//TODO: Make a change log, that is written to every time there is a change. Probably handle this inside the 
//enter button handler.

namespace FileWatcherApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private int x = 1;
        private DateTime fsLastRaised;
        private FileSystemWatcher watcher;
        private ArrayList foldersToWatch = new ArrayList();
        private string changedFilePath = null;
        private string extension = null;
        private string destination = null;
        private Dictionary<string, FileSystemWatcher> watchDictionary = new Dictionary<string, FileSystemWatcher>();

        public MainWindow()
        {
            InitializeComponent();
            fileWatcherApp.ResizeMode = ResizeMode.NoResize;
            fileWatcherApp.ResizeMode = ResizeMode.CanMinimize;

        }
        /*
         * Start button watcher from the top toolbar. Will start the actual file watcher.
         * Sets up the 4 event handlers to handle any changes in the file. 
         * Watches for: Renaming files, deleting files, creating files, and changing files(only prompts on save)
         * 
         */
        private void start_Button_Click(object sender, RoutedEventArgs e)
        {
            if (foldersToWatch.Count == 0 || destination == null) //Cannot start without a file to watch.
            {
                if (destination == null) //ensure there is a destination folder to save to.
                {
                    destination = DestinationTextBox.Text;
                    if (destination.Length < 4)
                    {
                        MessageBoxResult result = MessageBox.Show("Must enter a destination.", "Invalid Input",
                            MessageBoxButton.OK, MessageBoxImage.Question);
                    }
                }
                else
                {
                    MessageBoxResult result = MessageBox.Show("Must enter a file to watch.", "Invalid Input",
                        MessageBoxButton.OK, MessageBoxImage.Question);
                }
            }
            else
            {
                try
                {
                    foreach (string file in foldersToWatch)
                    {
                        watcher = new FileSystemWatcher();
                            FileInfo createdFile = new FileInfo(file);
                            this.extension = createdFile.Extension;
                            watcher.Path = Path.GetDirectoryName(file);
                            watcher.Filter = Path.GetFileName(file);
                            try
                            {
                                System.IO.File.Copy(file, destination + "Rev_0_"
                                    + Path.GetFileName(file) + "_OnStart" + extension, false); //only works for files
                            }
                            catch (Exception) { }
                        watcher.EnableRaisingEvents = true;                     
                        watcher.Changed += new FileSystemEventHandler(onChange);
                        watcher.Created += new FileSystemEventHandler(onChange);
                        // watcher.Deleted += new FileSystemEventHandler(onChange);// don't handle deletes yet.
                        watcher.Renamed += new RenamedEventHandler(onChange);
                        watchDictionary.Add(file, watcher);
                    }

                    StartButton.IsEnabled = false; //Prevents accidental restarts
                    StopButton.IsEnabled = true;
                    RemoveButton.IsEnabled = false;
                    addFile_button.IsEnabled = false; //don't change whats being watched when running
                }
                catch (Exception)
                {
                    MessageBoxResult result = MessageBox.Show("Invalid File entered.", "Invalid File!",
                        MessageBoxButton.OK, MessageBoxImage.Question);
                    if (result == MessageBoxResult.OK)
                    {
                        //setFile_Button_Click(null, null);
                    }
                }
            }

        }
        /*
         * Set File button watcher. Will open an input box if clicked to set a new file/folder to watch.
         */
        private void addFile_Button_Click(object sender, RoutedEventArgs e)
        {
            watchFileBox.SelectionMode = SelectionMode.Multiple;
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            Nullable<bool> result = dlg.ShowDialog();
            if (result == true)
            {
                String watchingFile = dlg.FileName;
                if (!foldersToWatch.Contains(watchingFile))
                {
                    foldersToWatch.Add(watchingFile);
                    watchFileBox.Items.Add(watchingFile);
                }
                else
                {
                    MessageBoxResult a = MessageBox.Show("File already added!", "Invalid File!",
                    MessageBoxButton.OK, MessageBoxImage.Question);
                }
            }
        }

        private void browse_Button_Click(object sender, RoutedEventArgs e)
        {

            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.ValidateNames = false;
            dlg.CheckFileExists = false;
            dlg.CheckPathExists = true;
            dlg.FileName = "Folder Selection";
            Nullable<bool> result = dlg.ShowDialog();
            if (result == true)
            {

                destination = dlg.FileName;
                int index = destination.LastIndexOf("\\");
                if (index > 0)
                {
                    destination = destination.Substring(0, index + 1);
                }
                DestinationTextBox.Text = destination;
            }
        }

        /*
         * Stop button watcher for the toolbar.
         * It will clear the the event handlers and disable the stop button and enable the start button.
         */
        private void stop_Button_Click(object sender, RoutedEventArgs e)
        {
            StopButton.IsEnabled = false; //Clicking double stop will give a null pointer, so it is disabled if the app isn't currently running.
            StartButton.IsEnabled = true;
            addFile_button.IsEnabled = true;
            RemoveButton.IsEnabled = true;
            foreach (string file in foldersToWatch)
            {
                watcher = watchDictionary[file];
                watcher.Created -= onChange;
                //  watcher.Deleted -= onChange;
                watcher.Renamed -= onChange;
                watcher.Changed -= onChange;
                watcher.Dispose();
                watchDictionary.Remove(file);
            }
        }

        /*
         * Clear button watcher for the toolbar.
         * It will clear the contents of the textbox, which has a list of the most recent changes.
        */
        private void remove_Button_Click(object sender, RoutedEventArgs e)
        {
            if (watchFileBox.SelectedItems.Count != 0)
            {
                while (watchFileBox.SelectedIndex != -1)
                {
                    foldersToWatch.Remove(watchFileBox.SelectedItem);
                    watchFileBox.Items.RemoveAt(watchFileBox.SelectedIndex);
                }
            }

        }

        /*
         *Enter button watcher for the actual input box. Will collapse the input box and then handle the data. 
        */
        private void enter_Button_Click(object sender, RoutedEventArgs e)
        {

            // enterButton Clicked! Hides InputBox and handles the input text.
            // Going to get the path for what changed and resave it somewhere else with a new name. eg Rev_x_"why it changed". x is a xer
            String Textinput = InputTextBox.Text;
            listbox3.Items.Add(Textinput + ": " + changedFilePath);
            String path = Path.GetFileName(changedFilePath);
            System.IO.File.Copy(changedFilePath, destination + "Rev_" + x +
                "_" + path + "_" + Textinput + extension, true);
            // Clear InputBox.
            InputTextBox.Clear();
            changedFilePath = "";
            extension = "";
            x++;
            InputBox.Visibility = System.Windows.Visibility.Collapsed;

        }

        /*
         *Clear button watcher for the actual input box. Clears out the data in the input box. 
         */
        private void input_ClearButton_Click(object sender, RoutedEventArgs e)
        {
            // Clear InputBox.
            InputTextBox.Clear();
        }

        /*
         * Event handler for when a new file is changed. 
         */
        protected void onChange(object fschanged, FileSystemEventArgs changeEvent)
        {
            try
            {
                if (DateTime.Now.Subtract(fsLastRaised).TotalMilliseconds > 500)
                {
                    fsLastRaised = DateTime.Now;
                    System.Threading.Thread.Sleep(100);

                    changedFilePath = changeEvent.FullPath; //Gets the path to the changed document.
                    string CreatedFileName = changeEvent.Name;
                    FileInfo createdFile = new FileInfo(CreatedFileName);
                    this.extension = createdFile.Extension;
                    this.Dispatcher.Invoke((Action)(() =>
                    {
                        this.Activate();
                        InputBox.Visibility = System.Windows.Visibility.Visible;
                    }));
                }
            }
            catch (Exception)
            {
                MessageBoxResult result = MessageBox.Show("An Error Happened.", "Error!",
                MessageBoxButton.OK, MessageBoxImage.Question);

            }
        }
    }
}
